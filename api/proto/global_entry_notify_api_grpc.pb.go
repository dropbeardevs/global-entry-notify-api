// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: global_entry_notify_api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GlobalEntryNotifyServiceClient is the client API for GlobalEntryNotifyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GlobalEntryNotifyServiceClient interface {
	GrpcUpdateNotificationToken(ctx context.Context, in *UpdateNotificationTokenRq, opts ...grpc.CallOption) (*Error, error)
	GrpcUpdateNotificationDetails(ctx context.Context, in *UpdateNotificationDetailsRq, opts ...grpc.CallOption) (*Error, error)
	GrpcDeleteNotificationDetails(ctx context.Context, in *DeleteNotificationDetailsRq, opts ...grpc.CallOption) (*Error, error)
	GrpcGetLocations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LocationsRp, error)
	GrpcGetNotificationDetails(ctx context.Context, in *GetNotificationDetailsRq, opts ...grpc.CallOption) (*GetNotificationDetailsRp, error)
}

type globalEntryNotifyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGlobalEntryNotifyServiceClient(cc grpc.ClientConnInterface) GlobalEntryNotifyServiceClient {
	return &globalEntryNotifyServiceClient{cc}
}

func (c *globalEntryNotifyServiceClient) GrpcUpdateNotificationToken(ctx context.Context, in *UpdateNotificationTokenRq, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/global_entry_notify_api.GlobalEntryNotifyService/GrpcUpdateNotificationToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalEntryNotifyServiceClient) GrpcUpdateNotificationDetails(ctx context.Context, in *UpdateNotificationDetailsRq, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/global_entry_notify_api.GlobalEntryNotifyService/GrpcUpdateNotificationDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalEntryNotifyServiceClient) GrpcDeleteNotificationDetails(ctx context.Context, in *DeleteNotificationDetailsRq, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/global_entry_notify_api.GlobalEntryNotifyService/GrpcDeleteNotificationDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalEntryNotifyServiceClient) GrpcGetLocations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LocationsRp, error) {
	out := new(LocationsRp)
	err := c.cc.Invoke(ctx, "/global_entry_notify_api.GlobalEntryNotifyService/GrpcGetLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalEntryNotifyServiceClient) GrpcGetNotificationDetails(ctx context.Context, in *GetNotificationDetailsRq, opts ...grpc.CallOption) (*GetNotificationDetailsRp, error) {
	out := new(GetNotificationDetailsRp)
	err := c.cc.Invoke(ctx, "/global_entry_notify_api.GlobalEntryNotifyService/GrpcGetNotificationDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GlobalEntryNotifyServiceServer is the server API for GlobalEntryNotifyService service.
// All implementations must embed UnimplementedGlobalEntryNotifyServiceServer
// for forward compatibility
type GlobalEntryNotifyServiceServer interface {
	GrpcUpdateNotificationToken(context.Context, *UpdateNotificationTokenRq) (*Error, error)
	GrpcUpdateNotificationDetails(context.Context, *UpdateNotificationDetailsRq) (*Error, error)
	GrpcDeleteNotificationDetails(context.Context, *DeleteNotificationDetailsRq) (*Error, error)
	GrpcGetLocations(context.Context, *emptypb.Empty) (*LocationsRp, error)
	GrpcGetNotificationDetails(context.Context, *GetNotificationDetailsRq) (*GetNotificationDetailsRp, error)
	mustEmbedUnimplementedGlobalEntryNotifyServiceServer()
}

// UnimplementedGlobalEntryNotifyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGlobalEntryNotifyServiceServer struct {
}

func (UnimplementedGlobalEntryNotifyServiceServer) GrpcUpdateNotificationToken(context.Context, *UpdateNotificationTokenRq) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrpcUpdateNotificationToken not implemented")
}
func (UnimplementedGlobalEntryNotifyServiceServer) GrpcUpdateNotificationDetails(context.Context, *UpdateNotificationDetailsRq) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrpcUpdateNotificationDetails not implemented")
}
func (UnimplementedGlobalEntryNotifyServiceServer) GrpcDeleteNotificationDetails(context.Context, *DeleteNotificationDetailsRq) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrpcDeleteNotificationDetails not implemented")
}
func (UnimplementedGlobalEntryNotifyServiceServer) GrpcGetLocations(context.Context, *emptypb.Empty) (*LocationsRp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrpcGetLocations not implemented")
}
func (UnimplementedGlobalEntryNotifyServiceServer) GrpcGetNotificationDetails(context.Context, *GetNotificationDetailsRq) (*GetNotificationDetailsRp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrpcGetNotificationDetails not implemented")
}
func (UnimplementedGlobalEntryNotifyServiceServer) mustEmbedUnimplementedGlobalEntryNotifyServiceServer() {
}

// UnsafeGlobalEntryNotifyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GlobalEntryNotifyServiceServer will
// result in compilation errors.
type UnsafeGlobalEntryNotifyServiceServer interface {
	mustEmbedUnimplementedGlobalEntryNotifyServiceServer()
}

func RegisterGlobalEntryNotifyServiceServer(s grpc.ServiceRegistrar, srv GlobalEntryNotifyServiceServer) {
	s.RegisterService(&GlobalEntryNotifyService_ServiceDesc, srv)
}

func _GlobalEntryNotifyService_GrpcUpdateNotificationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotificationTokenRq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalEntryNotifyServiceServer).GrpcUpdateNotificationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/global_entry_notify_api.GlobalEntryNotifyService/GrpcUpdateNotificationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalEntryNotifyServiceServer).GrpcUpdateNotificationToken(ctx, req.(*UpdateNotificationTokenRq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalEntryNotifyService_GrpcUpdateNotificationDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotificationDetailsRq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalEntryNotifyServiceServer).GrpcUpdateNotificationDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/global_entry_notify_api.GlobalEntryNotifyService/GrpcUpdateNotificationDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalEntryNotifyServiceServer).GrpcUpdateNotificationDetails(ctx, req.(*UpdateNotificationDetailsRq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalEntryNotifyService_GrpcDeleteNotificationDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotificationDetailsRq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalEntryNotifyServiceServer).GrpcDeleteNotificationDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/global_entry_notify_api.GlobalEntryNotifyService/GrpcDeleteNotificationDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalEntryNotifyServiceServer).GrpcDeleteNotificationDetails(ctx, req.(*DeleteNotificationDetailsRq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalEntryNotifyService_GrpcGetLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalEntryNotifyServiceServer).GrpcGetLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/global_entry_notify_api.GlobalEntryNotifyService/GrpcGetLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalEntryNotifyServiceServer).GrpcGetLocations(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalEntryNotifyService_GrpcGetNotificationDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationDetailsRq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalEntryNotifyServiceServer).GrpcGetNotificationDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/global_entry_notify_api.GlobalEntryNotifyService/GrpcGetNotificationDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalEntryNotifyServiceServer).GrpcGetNotificationDetails(ctx, req.(*GetNotificationDetailsRq))
	}
	return interceptor(ctx, in, info, handler)
}

// GlobalEntryNotifyService_ServiceDesc is the grpc.ServiceDesc for GlobalEntryNotifyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GlobalEntryNotifyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "global_entry_notify_api.GlobalEntryNotifyService",
	HandlerType: (*GlobalEntryNotifyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GrpcUpdateNotificationToken",
			Handler:    _GlobalEntryNotifyService_GrpcUpdateNotificationToken_Handler,
		},
		{
			MethodName: "GrpcUpdateNotificationDetails",
			Handler:    _GlobalEntryNotifyService_GrpcUpdateNotificationDetails_Handler,
		},
		{
			MethodName: "GrpcDeleteNotificationDetails",
			Handler:    _GlobalEntryNotifyService_GrpcDeleteNotificationDetails_Handler,
		},
		{
			MethodName: "GrpcGetLocations",
			Handler:    _GlobalEntryNotifyService_GrpcGetLocations_Handler,
		},
		{
			MethodName: "GrpcGetNotificationDetails",
			Handler:    _GlobalEntryNotifyService_GrpcGetNotificationDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "global_entry_notify_api.proto",
}
